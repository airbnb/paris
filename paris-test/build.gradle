import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion rootProject.MIN_SDK_VERSION
        targetSdkVersion rootProject.TARGET_SDK_VERSION
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }


    compileOptions {
        sourceCompatibility rootProject.JAVA_SOURCE_VERSION
        targetCompatibility rootProject.JAVA_TARGET_VERSION
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation project(':paris')
    implementation project(':paris-test-lib')

    implementation deps.appcompat
    implementation deps.kotlin

    kapt project(':paris-processor')

    testImplementation project(':paris-processor')

    testImplementation files(getRuntimeJar())
    testImplementation files(Jvm.current().getToolsJar())

    testImplementation deps.junit
    testImplementation deps.testingCompile

    androidTestImplementation deps.espresso
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}

// Java files in the "resources" folder are not included in the build for some reason (seems like source files are skipped?)
// This files are needed to test the annotation processor, so we manually copy them into the build.
task('copyDebugTestResources', type: Copy) {
    from("${projectDir}/src/test/resources")
    into("${buildDir}/intermediates/sourceFolderJavaResources/debug")
}

task('copyReleaseTestResources', type: Copy) {
    from("${projectDir}/src/test/resources")
    into("${buildDir}/intermediates/sourceFolderJavaResources/release")
}

preBuild.dependsOn copyReleaseTestResources
preBuild.dependsOn copyDebugTestResources
